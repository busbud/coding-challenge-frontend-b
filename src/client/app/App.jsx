import React            from 'react';import {render}         from 'react-dom';import $                from 'jquery';import moment           from 'moment';import SplashBackground from './SplashBackground.jsx';import Icon             from './Icon.jsx';import IconToggle       from './IconToggle.jsx';import DepartureList    from './DepartureList.jsx';import CountDownBanner  from './CountDownBanner.jsx';import API  from './API.jsx';class App extends React.Component {	constructor(props) {		super(props);		this.state = {isMobile: false, config: { strings: {}, style: {}, video: {}}, results: {departures : [], operators : {}, locations: {}, cities: {}}};	}	componentDidMount() {		API		.fetchConfig()		.then(function(config) {						this.setState({				config: config			});						API.setConfig(config);						API.fetchDepartures({				origin:        config.origin.geoHash,				destination:   config.destination.geoHash,				departureDate: config.departureDate			})			.then(function(data) {								this.setState({					results: data				});							}.bind(this))			.catch(function(err) {				//Put some error handling							}.bind(this))								}.bind(this));		//Helps to keep us looking at useful things when the window resizes, or when we refresh the page.		$(window)			.resize(this.setViewPosition)			.on('beforeunload', this.setViewPosition);				this.setViewPosition();			}	setViewPosition() {				let isMobile = (window.innerWidth <= 767);				//Transition gate		if(this.isMobile !== isMobile) {			this.isMobile = isMobile;			let scrollTop = (isMobile ? 0 : window.innerHeight-200)			$("body").animate({scrollTop: scrollTop}, 0);		}			}		render () {				return (			<div className={'locale-' + this.state.config.locale}>								<SplashBackground 					video={this.state.config.video} 				/>								<header>					<div className="logo" />					<CountDownBanner 						config={this.state.config} 						endTime={this.state.config.eventStartTime} 					/>					{!this.state.config.strings.TAG_LINE ? false :						<div className="tagLineBanner">							{this.state.config.strings.TAG_LINE}						</div>					}				</header>								<section>					<div className="listHeader">						{this.state.config.strings.DEPARTURES_HEADER}					</div>					<DepartureList 						data={this.state.results} 						config={this.state.config}					/>				</section>								<footer>					<div className="row">						<div className="col-xs-12">							<a href="http://builtinmtl.com" target="_blank" rel="nofollow">Built in Montreal</a> | Powered by Busbud, Inc. Â© 2016						</div>					</div>				</footer>						</div>		);	}}render(<App />, document.getElementById('app'));